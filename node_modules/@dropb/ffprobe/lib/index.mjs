// src/ffprobe.ts
import { execFile, spawnSync } from "child_process";
import { Stream } from "stream";
import { deprecate } from "util";
var args = [
  "-v",
  "quiet",
  "-print_format",
  "json",
  "-show_format",
  "-show_streams",
  "-show_error",
  "-i"
];
ffprobe.path = "ffprobe";
var parseStdout = (stdout) => {
  try {
    const value = JSON.parse(stdout);
    if ("format" in value) {
      return { value };
    }
    if ("error" in value) {
      return {
        error: Object.assign(new Error(value.error.string), {
          name: "FfprobeError",
          code: value.error.code
        })
      };
    }
  } catch {
  }
  return {
    error: Object.assign(new Error("Erroneous response from ffprobe"), { stdout })
  };
};
var ffprobePromise = (input) => {
  return new Promise((resolve, reject) => {
    const inputIsStream = isStream(input);
    const source = inputIsStream ? "pipe:0" : input;
    const { stdin } = execFile(
      process.env.FFPROBE_PATH || ffprobe.path,
      [...args, source],
      (ex, stdout, stderr) => {
        if (!stdout)
          return reject(ex || new Error("No output from ffprobe"));
        const { error, value } = parseStdout(stdout);
        return error ? reject(error) : resolve(value);
      }
    );
    if (inputIsStream) {
      if (!stdin)
        return reject(new Error("Error opening stdin"));
      input.pipe(stdin);
    }
  });
};
function ffprobe(input, cb) {
  if (cb) {
    ffprobePromise(input).then((data) => cb(null, data)).catch(cb);
  } else {
    return ffprobePromise(input);
  }
}
function isStream(input) {
  return input instanceof Stream && typeof input._read === "function";
}
function ffprobeSyncDeprecated(input) {
  const { error, stdout } = spawnSync(process.env.FFPROBE_PATH || ffprobe.path, [...args, input]);
  if (error) {
    throw error;
  }
  const data = parseStdout(stdout.toString());
  if (data.error) {
    throw data.error;
  }
  return data.value;
}
var ffprobeSync = deprecate(ffprobeSyncDeprecated, "ffprobeSync() is deprecated.");
export {
  ffprobe,
  ffprobeSync
};
